# PowerShell Script for generating XINU includes
# This script generates a wrapper header to use the existing XINU code

# Configuration Variables
$projectDir = $PSScriptRoot
$xinuIncludesPath = Join-Path -Path $projectDir -ChildPath "xinu_includes.h"
$currentDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$currentUser = $env:USERNAME  # Get the current Windows username dynamically

# Display header
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "=== XINU Includes Generator ===" -ForegroundColor Cyan
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "Current Date and Time (UTC): $currentDate" -ForegroundColor White
Write-Host "Current User's Login: $currentUser" -ForegroundColor White
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "Generating essential files for XINU simulation..." -ForegroundColor Yellow

# Function to generate xinu_includes.h
function Generate-XinuIncludes {
    param (
        [string]$outputPath
    )
    
    Write-Host "Generating XINU includes header file..." -ForegroundColor Yellow
    
    # Create header content
    $headerContent = @"
/* xinu_includes.h - Essential header for XINU simulation
 * Generated on: $currentDate
 * Generated by: $currentUser
 */

#ifndef _XINU_INCLUDES_H_
#define _XINU_INCLUDES_H_

/* System includes required for simulation */
#include <windows.h>
#include <time.h>

/* Include the XINU header */
#include "xinu.h"

/* Function declarations */
extern void update_system_time(void);
extern void Win32Sleep(DWORD ms);

#endif /* _XINU_INCLUDES_H_ */
"@
    
    # Write the file
    $headerContent | Out-File -FilePath $outputPath -Encoding UTF8
    
    Write-Host "Generated XINU includes header at: $outputPath" -ForegroundColor Green
}

# Check for the starvation prevention file
function Check-StarvationFile {
    param (
        [string]$filepath
    )
    
    if (-not (Test-Path $filepath)) {
        Write-Host "Starvation prevention file not found at: $filepath" -ForegroundColor Yellow
        return $false
    }
    
    Write-Host "Starvation prevention file already exists at: $filepath" -ForegroundColor Green
    
    # Simple validation of expected functions
    $fileContent = Get-Content -Path $filepath -Raw
    $hasExpectedFunctions = ($fileContent -match "starvation_test_Q1" -and $fileContent -match "starvation_test_Q2")
    
    if ($hasExpectedFunctions) {
        Write-Host "Starvation prevention file has correct function signatures." -ForegroundColor Green
        return $true
    } else {
        Write-Host "WARNING: Starvation prevention file might be missing expected functions." -ForegroundColor Yellow
        return $false
    }
}

# Main execution
try {
    # Generate xinu_includes.h
    Generate-XinuIncludes -outputPath $xinuIncludesPath
    
    # Check for starvation prevention implementation
    $starvationFilePath = Join-Path -Path $projectDir -ChildPath "system\starvation_prevention.c"
    Check-StarvationFile -filepath $starvationFilePath
    
    Write-Host "`nXINU include files generated successfully!" -ForegroundColor Green
}
catch {
    Write-Host "ERROR: An error occurred while generating files:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}