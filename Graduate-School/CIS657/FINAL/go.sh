#!/bin/bash
# go.sh: Build XINU with GCC on UNIX-like systems (Linux, WSL, macOS, MSYS2, etc.)
# Outputs all compiler/linker output to compilation.txt, just like go.ps1.

set -e

PROJECT_DIR="$(cd "$(dirname "$0")"; pwd)"
SIM_OUTPUT_DIR="$PROJECT_DIR/sim_output"
OBJ_DIR="$SIM_OUTPUT_DIR/obj"
LOGFILE="$PROJECT_DIR/compilation.txt"
XINU_CORE_NAME="xinu_core"
XINU_CORE_OUTPUT="$SIM_OUTPUT_DIR/$XINU_CORE_NAME"
MAKEFILE="$PROJECT_DIR/compile/Makefile"

GEN_XINU_INCLUDES="$PROJECT_DIR/xinu_includes.h"
GEN_XINU_SIM_DECLS="$PROJECT_DIR/xinu_sim_declarations.h"
GEN_SIM_HELPER="$PROJECT_DIR/xinu_simulation.c"

CLEAN_BUILD=0
RUN_HOST=0
STARVATION_TEST=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --clean)
            CLEAN_BUILD=1
            shift
            ;;
        --run)
            RUN_HOST=1
            shift
            ;;
        --starvation)
            STARVATION_TEST="$2"
            shift 2
            ;;
        *)
            echo "Unknown argument: $1"
            exit 2
            ;;
    esac
done

# --- Compilation.txt Header ---
LINUX_USER="$(whoami)"
NOW_FMT="$(date '+%H:%M:%S %Z %Y-%m-%d')"
# Always start with the header
echo "compilation.txt generated by $LINUX_USER at $NOW_FMT" > "$LOGFILE"

# Logging function: logs to both terminal and compilation.txt
log() {
    local msg="$1"
    echo "$(date '+%Y-%m-%d %H:%M:%S %Z') - $msg" | tee -a "$LOGFILE"
}

# --- Clean ---
if [[ $CLEAN_BUILD -eq 1 ]]; then
    rm -rf "$SIM_OUTPUT_DIR" "$GEN_XINU_INCLUDES" "$GEN_XINU_SIM_DECLS" "$GEN_SIM_HELPER"
    # Re-write header after cleaning
    echo "compilation.txt generated by $LINUX_USER at $NOW_FMT" > "$LOGFILE"
    log "Cleaning previous build..."
fi
mkdir -p "$SIM_OUTPUT_DIR" "$OBJ_DIR"

# --- Generate xinu_includes.h ---
cat > "$GEN_XINU_INCLUDES" <<'EOF'
/* xinu_includes.h - Wrapper for XINU code compilation.
 * Generated by go.sh
 * Version: GCC build variant
 */
#ifndef _XINU_INCLUDES_H_
#define _XINU_INCLUDES_H_

#include "xinu.h"
#include <stdarg.h>
#include <stddef.h>
#include "xinu_sim_declarations.h"

/* --- AGGRESSIVE SHIMS --- */
#ifdef getchar
#undef getchar
#endif
#define getchar() xinu_getchar_sim_redirect()
#ifdef putchar
#undef putchar
#endif
#define putchar(c) xinu_putchar_sim_redirect(c)

#define printf xinu_printf_sim_redirect
#define fprintf xinu_fprintf_sim_redirect
#define sprintf xinu_sprintf_sim_redirect
#define scanf xinu_scanf_sim_redirect
#define fscanf xinu_fscanf_sim_redirect
#define sscanf xinu_sscanf_sim_redirect
#define fgetc xinu_fgetc_sim_redirect
#define fgets xinu_fgets_sim_redirect
#define fputc xinu_fputc_sim_redirect
#define fputs xinu_fputs_sim_redirect

#define _doprnt xinu_doprnt_sim_redirect
#define _doscan xinu_doscan_sim_redirect

#ifdef abs
#undef abs
#endif
#define abs(n) xinu_abs_sim_redirect(n)
#ifdef labs
#undef labs
#endif
#define labs(n) xinu_labs_sim_redirect(n)

#define atoi(s) xinu_atoi_sim_redirect(s)
#define atol(s) xinu_atol_sim_redirect(s)

#ifdef rand
#undef rand
#endif
#define rand() xinu_rand_sim_redirect()
#ifdef srand
#undef srand
#endif
#define srand(s) xinu_srand_sim_redirect(s)

#ifdef qsort
#undef qsort
#endif
#define qsort(b,n,s,c) xinu_qsort_sim_redirect(b,n,s,c)

#define strcpy xinu_strcpy_sim_redirect
#define strncpy xinu_strncpy_sim_redirect
#define strcat xinu_strcat_sim_redirect
#define strncat xinu_strncat_sim_redirect
#define strcmp xinu_strcmp_sim_redirect
#define strncmp xinu_strncmp_sim_redirect
#define strlen xinu_strlen_sim_redirect
#define strnlen xinu_strnlen_sim_redirect
#define strchr xinu_strchr_sim_redirect
#define strrchr xinu_strrchr_sim_redirect
#define strstr xinu_strstr_sim_redirect
#define memcpy xinu_memcpy_sim_redirect
#define memmove xinu_memmove_sim_redirect
#define memcmp xinu_memcmp_sim_redirect
#define memset xinu_memset_sim_redirect

#endif /* _XINU_INCLUDES_H_ */
EOF
log "Generated UNIX-like simulation includes wrapper at: $GEN_XINU_INCLUDES"

# --- Generate xinu_sim_declarations.h ---
cat > "$GEN_XINU_SIM_DECLS" <<'EOF'
/* xinu_sim_declarations.h - Declarations for XINU simulation shim functions.
 * Generated by go.sh
 * Version: GCC build variant
 */
#ifndef _XINU_SIM_DECLARATIONS_H_
#define _XINU_SIM_DECLARATIONS_H_

#include <stdarg.h>
#include <stddef.h>

// Stdio
int xinu_printf_sim_redirect(const char *format, ...);
int xinu_fprintf_sim_redirect(void *stream, const char *format, ...);
int xinu_sprintf_sim_redirect(char *buffer, const char *format, ...);
int xinu_scanf_sim_redirect(const char *format, ...);
int xinu_fscanf_sim_redirect(void *stream, const char *format, ...);
int xinu_sscanf_sim_redirect(const char *buffer, const char *format, ...);
int xinu_getchar_sim_redirect(void);
int xinu_putchar_sim_redirect(int c);
int xinu_fgetc_sim_redirect(void *stream);
char* xinu_fgets_sim_redirect(char *str, int num, void *stream);
int xinu_fputc_sim_redirect(int c, void *stream);
int xinu_fputs_sim_redirect(const char *str, void *stream);

typedef int ((*xinu_putc_func_t)(int, int));
typedef int ((*xinu_getc_func_t)(int));
typedef int ((*xinu_ungetc_func_t)(int,int));

int xinu_doprnt_sim_redirect(char *fmt, va_list ap, xinu_putc_func_t putc_func, int putc_arg);
int xinu_doscan_sim_redirect(char *fmt, va_list ap, xinu_getc_func_t getc_func, xinu_ungetc_func_t ungetc_func, int getc_arg, int ungetc_arg);

// Stdlib
int xinu_abs_sim_redirect(int n);
long xinu_labs_sim_redirect(long n);
int xinu_atoi_sim_redirect(const char *str);
long xinu_atol_sim_redirect(const char *str);
int xinu_rand_sim_redirect(void);
void xinu_srand_sim_redirect(unsigned int seed);
typedef int (*xinu_qsort_cmp_t)(const void *, const void *);
void xinu_qsort_sim_redirect(void *base, size_t num, size_t size, xinu_qsort_cmp_t compare);

// String
char* xinu_strcpy_sim_redirect(char *dest, const char *src);
char* xinu_strncpy_sim_redirect(char *dest, const char *src, size_t n);
char* xinu_strcat_sim_redirect(char *dest, const char *src);
char* xinu_strncat_sim_redirect(char *dest, const char *src, size_t n);
int xinu_strcmp_sim_redirect(const char *s1, const char *s2);
int xinu_strncmp_sim_redirect(const char *s1, const char *s2, size_t n);
size_t xinu_strlen_sim_redirect(const char *s);
size_t xinu_strnlen_sim_redirect(const char *s, size_t maxlen);
char* xinu_strchr_sim_redirect(const char *s, int c);
char* xinu_strrchr_sim_redirect(const char *s, int c);
char* xinu_strstr_sim_redirect(const char *haystack, const char *needle);
void* xinu_memcpy_sim_redirect(void *dest, const void *src, size_t n);
void* xinu_memmove_sim_redirect(void *dest, const void *src, size_t n);
int xinu_memcmp_sim_redirect(const void *s1, const void *s2, size_t n);
void* xinu_memset_sim_redirect(void *s, int c, size_t n);

// Simulation specific helpers
void xinu_simulation_yield(void);
void xinu_trigger_clock_interrupt(void);

#endif /* _XINU_SIM_DECLARATIONS_H_ */
EOF
log "Generated UNIX-like simulation declarations at: $GEN_XINU_SIM_DECLS"

# --- Generate xinu_simulation.c (host-side simulation shims, works on UNIX-like) ---
cat > "$GEN_SIM_HELPER" <<'EOF'
/* xinu_simulation.c - Helper functions for UNIX-like Simulation
 * Generated by go.sh
 * Version: GCC build variant
 */
#include "xinu_sim_declarations.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include <time.h>

int xinu_printf_sim_redirect(const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vprintf(format, args); va_end(args); fflush(stdout); return ret;
}
int xinu_fprintf_sim_redirect(void *stream, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vfprintf((FILE*)stream, format, args); va_end(args); if (stream) fflush((FILE*)stream); return ret;
}
int xinu_sprintf_sim_redirect(char *buffer, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vsprintf(buffer, format, args); va_end(args); return ret;
}
int xinu_scanf_sim_redirect(const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vscanf(format, args); va_end(args); return ret;
}
int xinu_fscanf_sim_redirect(void *stream, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vfscanf((FILE*)stream, format, args); va_end(args); return ret;
}
int xinu_sscanf_sim_redirect(const char *buffer, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vsscanf(buffer, format, args); va_end(args); return ret;
}
int xinu_getchar_sim_redirect(void) { return getchar(); }
int xinu_putchar_sim_redirect(int c) { return putchar(c); }
int xinu_fgetc_sim_redirect(void *stream) { return fgetc((FILE*)stream); }
char* xinu_fgets_sim_redirect(char *str, int num, void *stream) { return fgets(str, num, (FILE*)stream); }
int xinu_fputc_sim_redirect(int c, void *stream) { return fputc(c, (FILE*)stream); }
int xinu_fputs_sim_redirect(const char *str, void *stream) { return fputs(str, (FILE*)stream); }

int xinu_doprnt_sim_redirect(char *fmt, va_list ap, xinu_putc_func_t putc_func, int putc_arg) {
    char buffer[4096];
    int ret = vsprintf(buffer, fmt, ap);
    if (putc_func) { for (int i = 0; i < ret; ++i) { putc_func(buffer[i], putc_arg); } }
    return ret;
}
int xinu_doscan_sim_redirect(char *fmt, va_list ap, xinu_getc_func_t getc_func, xinu_ungetc_func_t ungetc_func, int getc_arg, int ungetc_arg) {
    (void)fmt; (void)ap; (void)getc_func; (void)ungetc_func; (void)getc_arg; (void)ungetc_arg;
    return 0;
}
int xinu_abs_sim_redirect(int n) { return abs(n); }
long xinu_labs_sim_redirect(long n) { return labs(n); }
int xinu_atoi_sim_redirect(const char *str) { return atoi(str); }
long xinu_atol_sim_redirect(const char *str) { return atol(str); }
int xinu_rand_sim_redirect(void) { return rand(); }
void xinu_srand_sim_redirect(unsigned int seed) { srand(seed); }
void xinu_qsort_sim_redirect(void *base, size_t num, size_t size, xinu_qsort_cmp_t compare) {
    qsort(base, num, size, compare);
}
char* xinu_strcpy_sim_redirect(char *dest, const char *src) { return strcpy(dest, src); }
char* xinu_strncpy_sim_redirect(char *dest, const char *src, size_t n) { return strncpy(dest, src, n); }
char* xinu_strcat_sim_redirect(char *dest, const char *src) { return strcat(dest, src); }
char* xinu_strncat_sim_redirect(char *dest, const char *src, size_t n) { return strncat(dest, src, n); }
int xinu_strcmp_sim_redirect(const char *s1, const char *s2) { return strcmp(s1, s2); }
int xinu_strncmp_sim_redirect(const char *s1, const char *s2, size_t n) { return strncmp(s1, s2, n); }
size_t xinu_strlen_sim_redirect(const char *s) { return strlen(s); }
size_t xinu_strnlen_sim_redirect(const char *s, size_t maxlen) {
#if defined(_WIN32) && defined(__STDC_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ && defined(strnlen_s)
    return strnlen_s(s, maxlen);
#else
    size_t i = 0; while (i < maxlen && s[i]) { ++i; } return i;
#endif
}
char* xinu_strchr_sim_redirect(const char *s, int c) { return (char*)strchr(s, c); }
char* xinu_strrchr_sim_redirect(const char *s, int c) { return (char*)strrchr(s, c); }
char* xinu_strstr_sim_redirect(const char *haystack, const char *needle) { return (char*)strstr(haystack, needle); }
void* xinu_memcpy_sim_redirect(void *dest, const void *src, size_t n) { return memcpy(dest, src, n); }
void* xinu_memmove_sim_redirect(void *dest, const void *src, size_t n) { return memmove(dest, src, n); }
int xinu_memcmp_sim_redirect(const void *s1, const void *s2, size_t n) { return memcmp(s1, s2, n); }
void* xinu_memset_sim_redirect(void *s, int c, size_t n) { return memset(s, c, n); }

void xinu_simulation_yield(void) { }
void xinu_trigger_clock_interrupt(void) { }
EOF
log "Generated UNIX-like simulation helper at: $GEN_SIM_HELPER"

# --- Gather C source files from Makefile ---
log "Collecting XINU C source files from Makefile: $MAKEFILE"
srcfiles=()
parse_make_var() {
    local var="$1"
    local prefix="$2"
    local found
    found=$(awk -v var="$var" -v pre="$prefix" '
        BEGIN { ORS=" " }
        $1 ~ var && $2 ~ /=/ {
            for (i=3;i<=NF;i++) {
                if ($i ~ /\.c$/)
                    print pre "/" $i " ";
            }
        }
    ' "$MAKEFILE")
    for f in $found; do
        if [[ -f "$f" ]]; then srcfiles+=("$f"); fi
    done
}
parse_make_var "SYSTEM_CFILES" "$PROJECT_DIR/system"
parse_make_var "TTY_CFILES" "$PROJECT_DIR/device/tty"
parse_make_var "SHELL_CFILES" "$PROJECT_DIR/shell"
parse_make_var "LIBXCCFILES" "$PROJECT_DIR/lib/libxc"

for f in "$PROJECT_DIR"/lib/libxc/*.c; do [[ -f "$f" ]] && srcfiles+=("$f"); done
[[ -f "$PROJECT_DIR/xinu_core.c" ]] && srcfiles+=("$PROJECT_DIR/xinu_core.c")
[[ -f "$GEN_SIM_HELPER" ]] && srcfiles+=("$GEN_SIM_HELPER")

srcfiles=($(printf "%s\n" "${srcfiles[@]}" | sort -u))
log "Total XINU C source files collected for compilation: ${#srcfiles[@]}"

# --- Compile each C file ---
log "Building XINU Core Process..."
INCLUDES="-I$PROJECT_DIR -I$PROJECT_DIR/include"
for src in "${srcfiles[@]}"; do
    obj="$OBJ_DIR/$(basename "${src%.c}.o")"
    log "Compiling $src -> $obj"
    gcc -c "$src" $INCLUDES -o "$obj" >>"$LOGFILE" 2>&1
done

objs=("$OBJ_DIR"/*.o)
log "Linking objects to $XINU_CORE_OUTPUT"
gcc "${objs[@]}" -o "$XINU_CORE_OUTPUT" >>"$LOGFILE" 2>&1

log "XINU Core Build Process Finished."

if [[ $RUN_HOST -eq 1 ]]; then
    log "Running XINU Core: $XINU_CORE_OUTPUT $STARVATION_TEST"
    "$XINU_CORE_OUTPUT" $STARVATION_TEST
fi

log "XINU Simulation Build Script Finished."
