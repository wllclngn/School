# PowerShell Script for generating XINU includes
# This script generates a wrapper header to use the existing XINU code

# Configuration Variables
$projectDir = $PSScriptRoot
$xinuIncludesPath = Join-Path -Path $projectDir -ChildPath "xinu_includes.h"
$simulationCPath = Join-Path -Path $projectDir -ChildPath "xinu_simulation_win.c"
$currentDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"  # Dynamic date in UTC format
$currentUser = $env:USERNAME  # Dynamic username from Windows

# Display header
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "=== XINU Includes Generator ===" -ForegroundColor Cyan
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "Current Date and Time (UTC): $currentDate" -ForegroundColor White
Write-Host "Current User's Login: $currentUser" -ForegroundColor White
Write-Host "====================================================" -ForegroundColor Cyan
Write-Host "Generating essential files for XINU simulation..." -ForegroundColor Yellow

# Function to generate xinu_includes.h
function Generate-XinuIncludes {
    param (
        [string]$outputPath
    )
    
    Write-Host "Generating XINU includes header file..." -ForegroundColor Yellow
    
    # Create header content - isolate XINU from Windows headers
    $headerContent = @"
/* xinu_includes.h - Isolation layer for XINU simulation
 * Generated on: $currentDate
 * Generated by: $currentUser
 */

#ifndef _XINU_INCLUDES_H_
#define _XINU_INCLUDES_H_

/* Prevent Windows headers from being included inside XINU code */
#define _WINDOWS_
#define _INC_WINDOWS
#define _WINSOCK2API_
#define _WINBASE_

/* Windows types mapped to XINU types to prevent conflicts */
#define VOID void
#define DWORD unsigned long
#define HANDLE void*
#define HWND void*

/* Function prototypes for simulation */
extern void initialize_system(void);
extern void update_system_time(void);
extern void Win32Sleep(unsigned long ms);

/* Define XINU simulation macro */
#define XINU_SIMULATION

/* Now include actual XINU headers */
#include "xinu.h"

#endif /* _XINU_INCLUDES_H_ */
"@
    
    # Write the file
    $headerContent | Out-File -FilePath $outputPath -Encoding UTF8
    
    Write-Host "Generated XINU includes header at: $outputPath" -ForegroundColor Green
}

# Function to generate Windows simulation wrapper
function Generate-SimulationWrapper {
    param (
        [string]$outputPath
    )
    
    Write-Host "Generating Windows simulation wrapper..." -ForegroundColor Yellow
    
    # Create Windows wrapper content
    $wrapperContent = @"
/* xinu_simulation_win.c - Windows wrapper for XINU simulation
 * Generated on: $currentDate
 * Generated by: $currentUser
 * This file implements Windows-specific functions for XINU simulation
 */

/* Include Windows headers before any XINU code */
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/* These are needed for the simulation */
#include "xinu_includes.h"

/* Global variables for simulation */
DWORD start_tick_count = 0;

/* 
 * update_system_time - Sync Windows time to XINU time
 */
void update_system_time(void) {
    DWORD current_tick = GetTickCount();
    
    if (start_tick_count == 0) {
        start_tick_count = current_tick;
        return;
    }
    
    DWORD elapsed = current_tick - start_tick_count;
    clkticks += elapsed % 1000;
    clktime += elapsed / 1000;
    
    start_tick_count = current_tick;
}

/*
 * Win32Sleep - Sleep wrapper that updates XINU time
 */
void Win32Sleep(DWORD ms) {
    Sleep(ms);
    update_system_time();
}

/*
 * initialize_simulation - Initialize the Windows simulation
 */
void initialize_simulation(void) {
    /* Initialize timing */
    start_tick_count = GetTickCount();
    
    /* Initialize XINU system */
    initialize_system();
    
    printf("Windows simulation environment initialized\n");
}

/* 
 * windows_main - Entry point for Windows simulation
 */
int windows_main(int argc, char *argv[]) {
    char *username = (argc > 1) ? argv[1] : "user";
    time_t now;
    struct tm *timeinfo;
    char timestr[64];
    
    /* Get current time */
    time(&now);
    timeinfo = gmtime(&now);
    strftime(timestr, sizeof(timestr), "%Y-%m-%d %H:%M:%S", timeinfo);
    
    /* Print header */
    printf("\n===================================================================\n");
    printf("XINU Starvation Prevention Simulation\n");
    printf("User: %s\n", username);
    printf("Date: %s UTC\n", timestr);
    printf("===================================================================\n\n");
    
    /* Initialize simulation environment */
    initialize_simulation();
    
    /* Call the main XINU function */
    xinu_main();
    
    return 0;
}

/* 
 * main - Windows entry point that calls our wrapper
 */
int main(int argc, char *argv[]) {
    return windows_main(argc, argv);
}
"@
    
    # Write the file
    $wrapperContent | Out-File -FilePath $outputPath -Encoding UTF8
    
    Write-Host "Generated Windows simulation wrapper at: $outputPath" -ForegroundColor Green
}

# Check for the starvation prevention file
function Check-StarvationFile {
    param (
        [string]$filepath
    )
    
    if (-not (Test-Path $filepath)) {
        Write-Host "Starvation prevention file not found at: $filepath" -ForegroundColor Yellow
        return $false
    }
    
    Write-Host "Starvation prevention file already exists at: $filepath" -ForegroundColor Green
    
    # Simple validation of expected functions
    $fileContent = Get-Content -Path $filepath -Raw
    $hasExpectedFunctions = ($fileContent -match "starvation_test_Q1" -and $fileContent -match "starvation_test_Q2")
    
    if ($hasExpectedFunctions) {
        Write-Host "Starvation prevention file has correct function signatures." -ForegroundColor Green
        return $true
    } else {
        Write-Host "WARNING: Starvation prevention file might be missing expected functions." -ForegroundColor Yellow
        return $false
    }
}

# Main execution
try {
    # Generate xinu_includes.h
    Generate-XinuIncludes -outputPath $xinuIncludesPath
    
    # Generate Windows simulation wrapper
    Generate-SimulationWrapper -outputPath $simulationCPath
    
    # Check for starvation prevention implementation
    $starvationFilePath = Join-Path -Path $projectDir -ChildPath "system\starvation_prevention.c"
    Check-StarvationFile -filepath $starvationFilePath
    
    Write-Host "`nXINU include files generated successfully!" -ForegroundColor Green
}
catch {
    Write-Host "ERROR: An error occurred while generating files:" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    exit 1
}