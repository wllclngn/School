### BEGIN XINU_STDDEFS_H ###
/* xinu_stddefs.h - Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#ifndef _XINU_STDDEFS_H_
#define _XINU_STDDEFS_H_

/* Basic XINU type definitions */
typedef void exchandler;
typedef int message;
typedef int syscall;
typedef int process;
typedef int int32;
typedef unsigned int uint32;
typedef int bool32;
typedef int did32;
typedef int pid32;
typedef int status;

/* Process state constants */
#define PR_FREE      0       /* Process table entry is unused              */
#define PR_CURR      1       /* Process is currently running               */
#define PR_READY     2       /* Process is on ready queue                  */
#define PR_RECV      3       /* Process waiting for message                */
#define PR_SLEEP     4       /* Process is sleeping                        */
#define PR_SUSP      5       /* Process is suspended                       */
#define PR_WAIT      6       /* Process is on semaphore queue              */
#define PR_RECTIM    7       /* Process is receiving with timeout          */

/* Error/status codes */
#define OK            1      /* System call returns OK                     */
#define SYSERR       -1      /* System call returns error                  */
#define SHELL_OK      1      /* Shell command returns OK                   */
#define SHELL_ERROR  -1      /* Shell command returns error                */
#define BADPID       -1      /* Error process ID                           */

/* Other common definitions */
#define NULL         0       /* Null pointer                               */
#define EOF         -2       /* End-of-file                                */

#endif /* _XINU_STDDEFS_H_ */
### END XINU_STDDEFS_H ###

### BEGIN XINU_H ###
/* xinu.h - Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#ifndef _XINU_H_
#define _XINU_H_

#include "xinu_stddefs.h"
#include <stddef.h>

/* Process table declarations */
extern struct procent {
    unsigned long prstate;   /* Process state                          */
    char *prstkbase;         /* Base of stack                          */
    int  prstklen;           /* Stack length                           */
    char prname[16];         /* Process name                           */
    int  prio;               /* Process priority                       */
    int  quantum;            /* Quantum (ticks until rescheduling)     */
    int  ppid;               /* Parent pid                             */
} proctab[];

/* External declarations for system variables */
extern pid32 currpid;        /* Currently executing process ID         */
extern unsigned long clktime;/* Current time in seconds since boot     */
extern unsigned long count1000;/* Milliseconds since last clock tick   */

/* Include all other header files */
/// [[[ BEGIN DYNAMIC XINU MODULE INCLUDES ]]]
/// [[[ END DYNAMIC XINU MODULE INCLUDES ]]]

/* Function prototypes */
syscall resched(void);
syscall resume(pid32);
pid32 create(void *funcaddr, uint32 ssize, int priority, char *name, uint32 nargs, ...);
syscall kill(pid32 pid);
syscall sleep(uint32 delay);
syscall sleepms(uint32 delay);
syscall yield(void);
void xinu_simulation_yield(void);
void xinu_trigger_clock_interrupt(void);

#endif /* _XINU_H_ */
### END XINU_H ###

### BEGIN XINU_INCLUDES_H ###
/* xinu_includes.h - Wrapper for XINU code compilation.
 * Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#ifndef _XINU_INCLUDES_SIM_WRAPPER_H_
#define _XINU_INCLUDES_SIM_WRAPPER_H_

#include "xinu.h" 
#include <stdarg.h>
#include <stddef.h> 
#include "xinu_sim_declarations.h"

/* --- AGGRESSIVE SHIMS --- */
#ifdef getchar
#undef getchar
#endif
#define getchar() xinu_getchar_sim_redirect()
#ifdef putchar
#undef putchar
#endif
#define putchar(c) xinu_putchar_sim_redirect(c)

#define printf xinu_printf_sim_redirect
#define fprintf xinu_fprintf_sim_redirect
#define sprintf xinu_sprintf_sim_redirect
#define scanf xinu_scanf_sim_redirect
#define fscanf xinu_fscanf_sim_redirect
#define sscanf xinu_sscanf_sim_redirect
#define fgetc xinu_fgetc_sim_redirect
#define fgets xinu_fgets_sim_redirect
#define fputc xinu_fputc_sim_redirect
#define fputs xinu_fputs_sim_redirect

#define _doprnt xinu_doprnt_sim_redirect
#define _doscan xinu_doscan_sim_redirect

#ifdef abs
#undef abs
#endif
#define abs(n) xinu_abs_sim_redirect(n)
#ifdef labs
#undef labs
#endif
#define labs(n) xinu_labs_sim_redirect(n)

#define atoi(s) xinu_atoi_sim_redirect(s)
#define atol(s) xinu_atol_sim_redirect(s)

#ifdef rand
#undef rand
#endif
#define rand() xinu_rand_sim_redirect()
#ifdef srand
#undef srand
#endif
#define srand(s) xinu_srand_sim_redirect(s)

#ifdef qsort
#undef qsort
#endif
#define qsort(b,n,s,c) xinu_qsort_sim_redirect(b,n,s,c)

#define strcpy xinu_strcpy_sim_redirect
#define strncpy xinu_strncpy_sim_redirect
#define strcat xinu_strcat_sim_redirect
#define strncat xinu_strncat_sim_redirect
#define strcmp xinu_strcmp_sim_redirect
#define strncmp xinu_strncmp_sim_redirect
#define strlen xinu_strlen_sim_redirect
#define strnlen xinu_strnlen_sim_redirect
#define strchr xinu_strchr_sim_redirect
#define strrchr xinu_strrchr_sim_redirect
#define strstr xinu_strstr_sim_redirect
#define memcpy xinu_memcpy_sim_redirect
#define memmove xinu_memmove_sim_redirect
#define memcmp xinu_memcmp_sim_redirect
#define memset xinu_memset_sim_redirect

/* Define kprintf as printf for simulation */
#define kprintf printf

#endif /* _XINU_INCLUDES_SIM_WRAPPER_H_ */
### END XINU_INCLUDES_H ###

### BEGIN XINU_SIM_DECLARATIONS_H ###
/* xinu_sim_declarations.h - Declarations for XINU simulation shim functions.
 * Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#ifndef _XINU_SIM_DECLARATIONS_H_
#define _XINU_SIM_DECLARATIONS_H_

#include <stdarg.h>
#include <stddef.h>

/* Standard IO Functions */
int xinu_printf_sim_redirect(const char *format, ...);
int xinu_fprintf_sim_redirect(void *stream, const char *format, ...);
int xinu_sprintf_sim_redirect(char *buffer, const char *format, ...);
int xinu_scanf_sim_redirect(const char *format, ...);
int xinu_fscanf_sim_redirect(void *stream, const char *format, ...);
int xinu_sscanf_sim_redirect(const char *buffer, const char *format, ...);
int xinu_getchar_sim_redirect(void);
int xinu_putchar_sim_redirect(int c);
int xinu_fgetc_sim_redirect(void *stream);
char* xinu_fgets_sim_redirect(char *str, int num, void *stream);
int xinu_fputc_sim_redirect(int c, void *stream);
int xinu_fputs_sim_redirect(const char *str, void *stream);

/* Special Function Types */
typedef int (*xinu_putc_func_t)(int, int);
typedef int (*xinu_doscan_getc_func_t)(int);
typedef int (*xinu_doscan_ungetc_func_t)(int, int);

/* Format String Handlers */
int xinu_doprnt_sim_redirect(char *fmt, va_list ap, xinu_putc_func_t putc_func, int putc_arg);
int xinu_doscan_sim_redirect(char *fmt, int *ap, xinu_doscan_getc_func_t getc_func, xinu_doscan_ungetc_func_t ungetc_func, int getc_arg, int ungetc_arg);

/* Standard Library Functions */
int xinu_abs_sim_redirect(int n);
long xinu_labs_sim_redirect(long n);
int xinu_atoi_sim_redirect(const char *str);
long xinu_atol_sim_redirect(const char *str);
int xinu_rand_sim_redirect(void);
void xinu_srand_sim_redirect(unsigned int seed);
typedef int (*xinu_qsort_cmp_t)(const void *, const void *);
void xinu_qsort_sim_redirect(void *base, size_t num, size_t size, xinu_qsort_cmp_t compare);

/* String Handling Functions */
char* xinu_strcpy_sim_redirect(char *dest, const char *src);
char* xinu_strncpy_sim_redirect(char *dest, const char *src, size_t n);
char* xinu_strcat_sim_redirect(char *dest, const char *src);
char* xinu_strncat_sim_redirect(char *dest, const char *src, size_t n);
int xinu_strcmp_sim_redirect(const char *s1, const char *s2);
int xinu_strncmp_sim_redirect(const char *s1, const char *s2, size_t n);
size_t xinu_strlen_sim_redirect(const char *s);
size_t xinu_strnlen_sim_redirect(const char *s, size_t maxlen);
char* xinu_strchr_sim_redirect(const char *s, int c);
char* xinu_strrchr_sim_redirect(const char *s, int c);
char* xinu_strstr_sim_redirect(const char *haystack, const char *needle);
void* xinu_memcpy_sim_redirect(void *dest, const void *src, size_t n);
void* xinu_memmove_sim_redirect(void *dest, const void *src, size_t n);
int xinu_memcmp_sim_redirect(const void *s1, const void *s2, size_t n);
void* xinu_memset_sim_redirect(void *s, int c, size_t n);

/* Simulation Helpers */
void xinu_simulation_yield(void);
void xinu_trigger_clock_interrupt(void);

#endif /* _XINU_SIM_DECLARATIONS_H_ */
### END XINU_SIM_DECLARATIONS_H ###

### BEGIN XINU_SIMULATION_C ###
/* xinu_simulation.c - Helper functions for UNIX-like Simulation
 * Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#include "xinu_sim_declarations.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h>
#include <time.h>

/* Standard IO redirects */
int xinu_printf_sim_redirect(const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vprintf(format, args); va_end(args); fflush(stdout); return ret;
}

int xinu_fprintf_sim_redirect(void *stream, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vfprintf((FILE*)stream, format, args); va_end(args); if (stream) fflush((FILE*)stream); return ret;
}

int xinu_sprintf_sim_redirect(char *buffer, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vsprintf(buffer, format, args); va_end(args); return ret;
}

int xinu_scanf_sim_redirect(const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vscanf(format, args); va_end(args); return ret;
}

int xinu_fscanf_sim_redirect(void *stream, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vfscanf((FILE*)stream, format, args); va_end(args); return ret;
}

int xinu_sscanf_sim_redirect(const char *buffer, const char *format, ...) {
    va_list args; int ret; va_start(args, format); ret = vsscanf(buffer, format, args); va_end(args); return ret;
}

int xinu_getchar_sim_redirect(void) { return getchar(); }
int xinu_putchar_sim_redirect(int c) { fflush(stdout); return putchar(c); }
int xinu_fgetc_sim_redirect(void *stream) { return fgetc((FILE*)stream); }
char* xinu_fgets_sim_redirect(char *str, int num, void *stream) { return fgets(str, num, (FILE*)stream); }
int xinu_fputc_sim_redirect(int c, void *stream) { fflush((FILE*)stream); return fputc(c, (FILE*)stream); }
int xinu_fputs_sim_redirect(const char *str, void *stream) { fflush((FILE*)stream); return fputs(str, (FILE*)stream); }

/* Format string handlers */
int xinu_doprnt_sim_redirect(char *fmt, va_list ap, xinu_putc_func_t putc_func, int putc_arg) {
    char buffer[4096]; 
    int ret = vsprintf(buffer, fmt, ap); 
    if (putc_func) { for (int i = 0; i < ret; ++i) { putc_func(buffer[i], putc_arg); } }
    return ret;
}

int xinu_doscan_sim_redirect(char *fmt, int *ap, xinu_doscan_getc_func_t getc_func, 
                             xinu_doscan_ungetc_func_t ungetc_func, int getc_arg, int ungetc_arg) {
    /* 
     * This is a functional implementation of the doscan shim that works with standard C I/O functions.
     * It creates a temporary buffer from the input stream, then uses sscanf to parse according to
     * the format string.
     */
    if (!fmt || !ap || !getc_func) {
        return -1;  /* Invalid arguments */
    }
    
    /* Build a temporary buffer from the input stream */
    char buffer[4096] = {0};  /* Use a reasonably large buffer */
    int i = 0;
    int c;
    
    /* Read characters until EOF or buffer full */
    while (i < 4095) {
        c = getc_func(getc_arg);
        if (c == EOF || c < 0) break;
        buffer[i++] = (char)c;
    }
    buffer[i] = '\0';  /* Ensure null-termination */
    
    /* Use standard sscanf to parse the buffer */
    return sscanf(buffer, fmt, ap);
}

/* Standard Library redirects */
int xinu_abs_sim_redirect(int n) { return abs(n); }
long xinu_labs_sim_redirect(long n) { return labs(n); }
int xinu_atoi_sim_redirect(const char *str) { return atoi(str); }
long xinu_atol_sim_redirect(const char *str) { return atol(str); }
int xinu_rand_sim_redirect(void) { return rand(); }
void xinu_srand_sim_redirect(unsigned int seed) { srand(seed); }
void xinu_qsort_sim_redirect(void *base, size_t num, size_t size, xinu_qsort_cmp_t compare) {
    qsort(base, num, size, compare);
}

/* String handling redirects */
char* xinu_strcpy_sim_redirect(char *dest, const char *src) { return strcpy(dest, src); }
char* xinu_strncpy_sim_redirect(char *dest, const char *src, size_t n) { return strncpy(dest, src, n); }
char* xinu_strcat_sim_redirect(char *dest, const char *src) { return strcat(dest, src); }
char* xinu_strncat_sim_redirect(char *dest, const char *src, size_t n) { return strncat(dest, src, n); }
int xinu_strcmp_sim_redirect(const char *s1, const char *s2) { return strcmp(s1, s2); }
int xinu_strncmp_sim_redirect(const char *s1, const char *s2, size_t n) { return strncmp(s1, s2, n); }
size_t xinu_strlen_sim_redirect(const char *s) { return strlen(s); }
size_t xinu_strnlen_sim_redirect(const char *s, size_t maxlen) {
#if defined(_WIN32) && defined(__STDC_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ && defined(strnlen_s)
    return strnlen_s(s, maxlen);
#elif defined(__linux__) || defined(__APPLE__) || defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200809L
    return strnlen(s, maxlen);
#else 
    size_t i = 0; while (i < maxlen && s[i]) { ++i; } return i;
#endif
}
char* xinu_strchr_sim_redirect(const char *s, int c) { return (char*)strchr(s, c); }
char* xinu_strrchr_sim_redirect(const char *s, int c) { return (char*)strrchr(s, c); }
char* xinu_strstr_sim_redirect(const char *haystack, const char *needle) { return (char*)strstr(haystack, needle); }
void* xinu_memcpy_sim_redirect(void *dest, const void *src, size_t n) { return memcpy(dest, src, n); }
void* xinu_memmove_sim_redirect(void *dest, const void *src, size_t n) { return memmove(dest, src, n); }
int xinu_memcmp_sim_redirect(const void *s1, const void *s2, size_t n) { return memcmp(s1, s2, n); }
void* xinu_memset_sim_redirect(void *s, int c, size_t n) { return memset(s, c, n); }

/* Simulation helpers */
void xinu_simulation_yield(void) {
    /* Simulation of XINU's yield() operation.
     * In a real simulation environment, this would actually yield to other processes.
     * For now, it's just a placeholder.
     */
}

void xinu_trigger_clock_interrupt(void) {
    /* Simulation of a clock interrupt to trigger rescheduling.
     * In a real simulation environment, this would invoke the clock interrupt handler.
     * For now, it's just a placeholder.
     */
}

/* Minimal XINU-like system call implementations */
int resched(void) { return 0; }
int resume(int pid) { return 0; }
int kill(int pid) { return 0; }
int sleep(unsigned int delay) { return 0; }
int sleepms(unsigned int delay) { return 0; }
int yield(void) { xinu_simulation_yield(); return 0; }
### END XINU_SIMULATION_C ###

### BEGIN XINU_CORE_C ###
/* xinu_core.c - Minimal XINU core for simulation 
 * Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */
#include "xinu_includes.h"

/* Global system variables */
pid32 currpid = 0;               /* Currently executing process ID   */
unsigned long clktime = 0;       /* Current time in seconds since boot */
unsigned long count1000 = 0;     /* Milliseconds since last second */

/* Process table */
struct procent proctab[20];      /* Simple process table with 20 entries */

/* Main function */
int main(int argc, char *argv[]) {
    printf("XINU Simulation Starting\n");
    printf("Generated by %s on %s\n", "{{ user }}", "{{ timestamp }}");
    
    /* Initialize process table */
    for (int i = 0; i < 20; i++) {
        proctab[i].prstate = PR_FREE;
        sprintf(proctab[i].prname, "proc%d", i);
        proctab[i].prio = 10;
        proctab[i].quantum = 100;
    }
    
    printf("XINU Simulation Ready\n");
    
    /* Add your test code here */
    
    return 0;
}
### END XINU_CORE_C ###
