"""
logger.py - Logging functionality for XINU builder
"""

import os
import sys
from datetime import datetime

LOG_FILE = "compilation.txt"
SUMMARY_FILE = "compilation_summary.txt"
VERBOSE = False

def setup_logger(verbose=False):
    """Configure the logger"""
    global VERBOSE
    VERBOSE = verbose
    
    user_login = os.environ.get("USER", os.environ.get("USERNAME", "unknown"))
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # Create the log file with header
    with open(LOG_FILE, 'w') as f:
        f.write(f"compilation.txt generated by {user_login} at {now} (script run: {now})\n")
    
    # Create summary file (will be merged at the end)
    with open(SUMMARY_FILE, 'w') as f:
        f.write("")

def log(message, verbose_only=False, summary=False):
    """Write log message to file and console"""
    if verbose_only and not VERBOSE:
        return
        
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S %Z")
    formatted = f"{timestamp} - {message}"
    print(formatted)
    
    with open(LOG_FILE, 'a') as f:
        f.write(f"{formatted}\n")
        
    if summary:
        with open(SUMMARY_FILE, 'a') as f:
            f.write(f"{formatted}\n")

def finalize_log():
    """Merge summary into main log and clean up"""
    try:
        if os.path.exists(SUMMARY_FILE):
            with open(SUMMARY_FILE, 'r') as f:
                summary_content = f.read()
                
            with open(LOG_FILE, 'a') as f:
                f.write("\n--- Build Summary ---\n")
                f.write(summary_content)
                
            os.remove(SUMMARY_FILE)
    except Exception as e:
        log(f"Error finalizing log: {str(e)}")
