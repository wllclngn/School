/* xinu_core.c - Minimal XINU core for simulation 
 * Generated by {{ generator }}
 * Generated on: {{ timestamp }}
 * By user: {{ user }}
 */

/* Include standard libraries first */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/* Then include our XINU simulation headers */
#include "xinu_stddefs.h"
#include "xinu_sim_declarations.h"
#include "xinu_includes.h"

/* Forward declarations for shell commands */
extern int starvation_test(int argc, char *argv[]);
extern int starvation_test2(int argc, char *argv[]);

/* Global system variables */
pid32 currpid = 0;               /* Currently executing process ID   */
unsigned long clktime = 0;       /* Current time in seconds since boot */
unsigned long count1000 = 0;     /* Milliseconds since last second */

/* Process table - will be defined in xinu.h, do not redefine here */
/* extern struct procent proctab[]; */

/* Main function */
int main(int argc, char *argv[]) {
    /* Initialize process table and stdio handles */
    for (int i = 0; i < 20; i++) {
        proctab[i].prstate = PR_FREE;
        sprintf(proctab[i].prname, "proc%d", i);
        proctab[i].prio = 10;
        proctab[i].quantum = 100;
        
        /* Set up standard I/O descriptors */
        proctab[i].prdesc[0] = stdin;
        proctab[i].prdesc[1] = stdout;
        proctab[i].prdesc[2] = stderr;
    }
    
    /* Set the current process ID to the first process */
    currpid = 0;
    
    printf("XINU Simulation Starting\n");
    
    char *user = getenv("USER");
    if (!user) {
        user = getenv("USERNAME"); /* For Windows */
    }
    printf("Generated by %s on %s\n", user ? user : "unknown", __DATE__ " " __TIME__);
    printf("XINU Simulation Ready\n");
    
    /* Process command line arguments */
    if (argc > 1) {
        if (strcmp(argv[1], "test1") == 0) {
            printf("Running starvation_test_Q1\n");
            return starvation_test(argc, argv);
        } 
        else if (strcmp(argv[1], "test2") == 0) {
            printf("Running starvation_test_Q2\n");
            return starvation_test2(argc, argv);
        }
        else {
            printf("Unknown command: %s\n", argv[1]);
            printf("Available commands:\n");
            printf("  test1 - Run starvation test Q1\n");
            printf("  test2 - Run starvation test Q2\n");
        }
    }
    
    return 0;
}